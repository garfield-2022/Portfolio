{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww17540\viewh12380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 # Create a new project in the Google Console.\
\
This file shows how to deploy the model using Kubernetes Engine on Google Cloud Platform.\
\
# Enable the Container Registry API.\
\
# Enable the Kubernetes Engine API.\
\
# Open Google Cloudshell\
\
# Clone the Git repo where the source code/data is available.\
git clone <url>\
\
# Create environment variables to keep the deployment consistent.\
export PROJECT_ID=\'85\
\
# Build a Docker image using the Dockerfile inside the directory.\
docker build . -f Dockerfile.txt -t gcr.io/$\{PROJECT_ID\}/ml_app:v1\
\
# Confirm that the image was successfully built.\
docker images\
\
# Push the Docker image to the Google Container registry.\
docker push gcr.io/$\{PROJECT_ID\}/ml_app:v1\
\
# Set the project to the project ID, the compute zone to us-central1-f, and create a small two-node cluster called ml-cluster.\
gcloud config set project $PROJECT_ID\
gcloud config set compute/zone us-central1-f\
gcloud container clusters create ml-cluster --num-nodes=2\
\
# Deploy Docker containers to run the ML app. \
# Make use of the create deployment command and pass the specific image location as input\
kubectl create deployment ml-app  --image=gcr.io/$\{PROJECT_ID\}/ml_app:v1\
\
# Expose the deployed app on port 5000.\
kubectl expose deployment ml-app --type=LoadBalancer --port 80 --target-port 5000\
\
# Get the external IP address through with the running app can be accessed.\
kubectl get service\
\
# Go to that external IP address and add /apidocs/ to it.\
\
# Get active pods\
kubectl get deployment\
\
\
\
 \
}